name: build

on:
  push

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        release: [ 'debug', 'release' ]
        rust-toolchain: [ 'stable' ]
        include:
          - release: debug
            binary-name: control-debug
            rust-target: x86_64-unknown-linux-gnu
            dependencies: >-
              gcc

          - release: release
            binary-name: control
            rust-target: armv7-unknown-linux-gnueabihf
            dependencies: >-
              gcc-multilib-arm-linux-gnueabihf
              libc-dev-armhf-cross

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential ${{ matrix.dependencies }} 

      - name: Setup rust '${{ matrix.rust-toolchain }}/${{ matrix.rust-target }}' environment
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-toolchain }}
          target: ${{ matrix.rust-target }}
          components: rustfmt

      - name: Cache rust dependencies
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ matrix.release }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ matrix.release }}-

      - run: make ${{ matrix.release }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.binary-name }}
          path: ${{ matrix.binary-name }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: "contains(github.ref, 'refs/tags/')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          body: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Get release artifact
        uses: actions/download-artifact@v1
        with:
          name: control
      - name: Get debug artifact
        uses: actions/download-artifact@v1
        with:
          name: control-debug

      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./control
          asset_name: control-${{ steps.get_version.outputs.VERSION }}-release-armv7
          asset_content_type: application/octet-stream
      - name: Upload debug artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./control-debug
          asset_name: control-${{ steps.get_version.outputs.VERSION }}-debug-amd64
          asset_content_type: application/octet-stream
